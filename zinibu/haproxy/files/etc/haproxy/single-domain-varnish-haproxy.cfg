# HAProxy configuration
#
# **** DO NOT EDIT THIS FILE ****
#
# This file is managed by Salt.
# Any changes will be overwritten.

global
    log /dev/log    local0
    log /dev/log    local1 notice
    # don't specify user and group to use source in backends
    #user haproxy
    #group haproxy
    #chroot  /var/lib/haproxy
    daemon
    stats socket /var/lib/haproxy/stats

defaults
    option http-server-close
    mode http
    log global
    option httplog
    timeout connect 5s
    timeout client 20s 
    timeout server 15s
    timeout check 1s
    timeout http-keep-alive 1s
    timeout http-request 10s # slowloris protection
    default-server inter 3s fall 2 rise 2 slowstart 60s
    #timeout queue 1m
    #retries 3
    #option forwardfor
    #option dontlognull
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 504 /etc/haproxy/errors/504.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 408 /etc/haproxy/errors/408.http

listen stats
    bind 192.168.1.95:8998
    stats enable
    stats hide-version
    stats uri /admin?stats
    stats realm HAProxy Statistics
    stats auth admin:admin
    stats refresh 20s

# main frontend dedicated to end users, uses a public IP
frontend ft_web
    bind 192.168.1.95:80
    acl static_content path_end .jpg .gif .png .css .js .htm .html
    #acl pseudo_static path_end .php ! path_beg /dynamic/
    acl image_dynamic path_beg /serve_image
    acl varnish_available nbsrv(bk_varnish_uri) ge 1
    # Caches health detection + routing decision
    use_backend bk_varnish_uri if varnish_available static_content
    #use_backend bk_varnish_uri if varnish_available pseudo_static
    use_backend bk_varnish_url_param if varnish_available image_dynamic
    # dynamic content or all caches are unavailable
    default_backend bk_appsrv

# appsrv backend for dynamic content
backend bk_appsrv
    balance roundrobin
    # app servers must say if everything is fine on their side
    # and they can process requests
    #option httpchk
    #option httpchk GET /appcheck
    #http-check expect rstring [oO][kK]
    cookie SERVERID insert indirect nocache
    # Transparent proxying using the client IP from the TCP connection
    source 192.168.1.95 usesrc clientip
    server s1 192.168.1.95:81 cookie s1 check maxconn 250
    server s2 192.168.1.96:81 cookie s2 check maxconn 250
    server s3 192.168.1.97:81 cookie s3 check maxconn 250

# static backend with balance based on the uri, including the query string
# to avoid caching an object on several caches
backend bk_varnish_uri
    balance uri whole # in latest HAProxy version, one can add 'whole' keyword
    # Varnish must tell it's ready to accept traffic
    #option httpchk HEAD /varnishcheck
    #http-check expect status 200
    # client IP information
    option forwardfor
    # avoid request redistribution when the number of caches changes (crash or start up)
    hash-type consistent
    server varnish1 192.168.1.95:83 check maxconn 1000

# cache backend with balance based on the value of the URL parameter called "id"
# to avoid caching an object on several caches
backend bk_varnish_url_param
    balance url_param id
    # client IP information
    option forwardfor
    # avoid request redistribution when the number of caches changes (crash or start up)
    hash-type consistent
    server varnish1 192.168.1.95:83 maxconn 1000 track bk_varnish_uri/varnish1

# frontend used by Varnish servers when updating their cache, uses private IP
frontend ft_web_static
    bind 192.168.33.15:80
    monitor-uri /haproxycheck
    acl no_webheads_available nbsrv(bk_appsrv_static) eq 0
    # Tells Varnish to stop asking for static content when app servers (webheads) are dead
    # Varnish would deliver staled content
    monitor fail if no_webheads_available
    default_backend bk_appsrv_static

# appsrv backend used by Varnish to update their cache
backend bk_appsrv_static
    balance roundrobin
    # anything different than a status code 200 on the URL /staticcheck.txt
    # must be considered as an error
    #option httpchk
    #option httpchk HEAD /staticcheck.txt
    #http-check expect status 200
    # Transparent proxying using the client IP provided by X-Forwarded-For header
    source 192.168.1.95 usesrc hdr_ip(X-Forwarded-For)
    server s1 192.168.1.95:81 check maxconn 50 slowstart 10s
    server s2 192.168.1.96:81 check maxconn 50 slowstart 10s
    server s3 192.168.1.97:81 check maxconn 50 slowstart 10s

### #------------------
### # Global settings
### #------------------
### global
###     log /dev/log    local0
###     log /dev/log    local1 notice
###     user haproxy
###     group haproxy
###     chroot  /var/lib/haproxy
###     daemon
###     stats socket /var/lib/haproxy/stats
###     ssl-default-bind-ciphers	ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
###     ssl-default-bind-options	no-sslv3 no-tlsv10 no-tlsv11
### 
### #------------------
### # common defaults that all the 'listen' and 'backend' sections will
### # use- if not designated in their block
### #------------------
### defaults
###     log global
###     mode http
###     retries 3
###     balance roundrobin
###     option	httplog
###     option	dontlognull
###     option	forwardfor
###     option	http-server-close
###     timeout http-request    10s
###     timeout queue           1m
###     timeout connect         10s
###     timeout client          1m
###     timeout server          1m
###     timeout http-keep-alive 10s
###     timeout check           10s
###     stats	enable
###     stats uri	/admin?stats
###     stats realm	Haproxy\ Statistics
###     stats auth	admin1:AdMiN123
###     errorfile 400 /etc/haproxy/errors/400.http
###     errorfile 504 /etc/haproxy/errors/504.http
###     errorfile 403 /etc/haproxy/errors/403.http
###     errorfile 500 /etc/haproxy/errors/500.http
###     errorfile 502 /etc/haproxy/errors/502.http
###     errorfile 503 /etc/haproxy/errors/503.http
###     errorfile 408 /etc/haproxy/errors/408.http
### 
### 
### #------------------
### # listen instances
### #------------------
### listen myservice
###     bind *:8888
###     option forwardfor
###     option http-server-close
###     default-server maxqueue 128  maxconn 256  slowstart 60s  weight 100 
###     server web2 web2.example.com:18888 check 
###     server web1 web1.example.com:80 check 
###   
### listen stats
###     bind 0.0.0.0:8998
###     mode http
###     stats enable
###     stats uri /admin?stats
###     stats refresh 20s
###   
### 
### 
### #------------------
### # frontend instances
### #------------------
### frontend www-http
###     bind	*:80
###     redirect	scheme https if !{ ssl_fc }
###     default_backend www-backend
###   
### 
### 
### #------------------
### # backend instances
### #------------------
### backend www-backend
###     balance roundrobin
###     server server1-its-name 192.168.33.15:81 check 
###   
### backend static-backend
###     balance roundrobin
###     option http-server-close
###     option httpclose
###     option forwardfor    except 127.0.0.0/8
###     option httplog
###     cookie pm insert indirect
###     stats enable
###     stats realm LoadBalancer
###     stats uri /url/to/stats
###     stats auth user:password
###     server some-server 192.168.33.16:81 check 
###   
