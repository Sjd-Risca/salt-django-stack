# HAProxy configuration
#
# **** DO NOT EDIT THIS FILE ****
#
# This file is managed by Salt.
# Any changes will be overwritten.

{%- macro render_list_of_dictionaries(name, list, indent = '    ', infix = ' ', postfix = '\t') %}
{%- if list is not iterable or list is string %}
{{ indent ~ name ~ postfix ~ list }}
{%- else %}{% for item in list %}
{%- if item is not iterable or item is string %}
{{ indent ~ name ~ postfix ~ item }}
{%- else %}{% for key, value in item.items() %}
{{- render_list_of_dictionaries(indent ~ name ~ infix ~ key, value, '', infix, postfix) }}
        {%- endfor %}
      {%- endif %}
    {%- endfor %}
  {%- endif %}
{%- endmacro %}

{% set zinibu_basic = salt['pillar.get']('zinibu_basic', {}) -%}

#------------------
# Global settings
#------------------
global
    log /dev/log    local0
    log /dev/log    local1 notice
    #user {{ salt['pillar.get']('haproxy:global:user', 'haproxy') }}
    #group {{ salt['pillar.get']('haproxy:global:group', 'haproxy') }}
{%- if salt['pillar.get']('haproxy:global:chroot:enable', 'no') == True %}
    #chroot {{ salt['pillar.get']('haproxy:global:chroot:path', '/tmp') }}
{%- endif %}
{%- if salt['pillar.get']('haproxy:global:daemon', 'no') == True %}
    daemon
{%- endif %}
{%- if salt['pillar.get']('haproxy:global:stats:enable', 'no') == True %}
    stats socket {{ salt['pillar.get']('haproxy:global:stats:socketpath', '/tmp/ha_stats.sock') }}
{%- endif %}
{%- if 'maxconn' in salt['pillar.get']('haproxy:global', {}) %}
    maxconn {{ salt['pillar.get']('haproxy:global:maxconn') }}
{%- endif %}
{%- if 'maxpipes' in salt['pillar.get']('haproxy:global', {}) %}
    maxpipes {{ salt['pillar.get']('haproxy:global:maxpipes') }}
{%- endif %}
{%- if 'spreadchecks' in salt['pillar.get']('haproxy:global', {}) %}
    spread-checks {{ salt['pillar.get']('haproxy:global:spreadchecks') }}
{%- endif %}
{%- if 'tune' in salt['pillar.get']('haproxy:global', {}) %}
    {{- render_list_of_dictionaries('tune', salt['pillar.get']('haproxy:global:tune'), '    ','.') }}
{%- endif %}
{%- if 'ssl-default-bind-ciphers' in salt['pillar.get']('haproxy:global', {}) %}
    {{- render_list_of_dictionaries('ssl-default-bind-ciphers', salt['pillar.get']('haproxy:global:ssl-default-bind-ciphers')) }}
{%- endif %}
{%- if 'ssl-default-bind-options' in salt['pillar.get']('haproxy:global', {}) %}
    {{- render_list_of_dictionaries('ssl-default-bind-options', salt['pillar.get']('haproxy:global:ssl-default-bind-options')) }}
{%- endif %}

defaults
    log {{ salt['pillar.get']('haproxy:defaults:log', 'global') }}
    mode {{ salt['pillar.get']('haproxy:defaults:mode', 'http') }}
    retries {{ salt['pillar.get']('haproxy:defaults:retries', '3') }}
    default-server {{ salt['pillar.get']('haproxy:defaults:default-server', '') }}
{%- if 'options' in salt['pillar.get']('haproxy:defaults', {}) -%}
    {{- render_list_of_dictionaries('option', salt['pillar.get']('haproxy:defaults:options')) }}
{%- endif %}
{%- if 'timeouts' in salt['pillar.get']('haproxy:defaults', {}) %}
  {%- for timeout in salt['pillar.get']('haproxy:defaults:timeouts') %}
    timeout {{ timeout }}
  {%- endfor %}
{%- else %}
    timeout client  1m
    timeout connect 10s
    timeout server  1m
{%- endif %}
{%- if 'errorfiles' in salt['pillar.get']('haproxy:defaults', {}) %}
  {%- for errorfile in salt['pillar.get']('haproxy:defaults:errorfiles').iteritems() %}
    errorfile {{ errorfile[0] }} {{ errorfile[1] }}
  {%- endfor %}
{%- endif %}

{% if 'haproxy_servers' in zinibu_basic.project %}
  {%- for id, haproxy_server in zinibu_basic.project.haproxy_servers.iteritems() %}
    {%- if grains['id'] == id %}
      {%- if 'stats' in haproxy_server %}
listen stats_{{ id }}
  bind {{ haproxy_server.stats_ip }}:{{ haproxy_server.stats_port }}
        {%- for option, value in haproxy_server.stats.iteritems() %}
          {%- if option == 'enable' and value %}
  stats enable
          {%- else %}
  stats {{ option }} {{ value }}
          {%- endif %}
        {%- endfor %}
      {%- endif %}
    {%- endif %}
  {% endfor %}
{%- endif %}

# main frontend dedicated to end users
frontend ft_web
    bind {{ zinibu_basic.project.haproxy_shared_ip }}:{{ zinibu_basic.project.haproxy_shared_port }} # public IP
#    redirect	scheme https if !{ ssl_fc }
    acl static_content path_end .jpg .gif .png .css .js .htm .html
    #acl pseudo_static path_end .php ! path_beg /dynamic/
    acl image_dynamic path_beg /serve_image
    acl varnish_available nbsrv(bk_varnish_uri) ge 1
    # Caches health detection + routing decision
    use_backend bk_varnish_uri if varnish_available static_content
    #use_backend bk_varnish_uri if varnish_available pseudo_static
    use_backend bk_varnish_url_param if varnish_available image_dynamic
    # dynamic content or all caches are unavailable
    default_backend bk_appsrv

# appsrv backend for dynamic content
backend bk_appsrv
    balance roundrobin
    # app servers must say if everything is fine on their side
    # and they can process requests
    #option httpchk
    #option httpchk GET /appcheck
    #http-check expect rstring [oO][kK]
    cookie SERVERID insert indirect nocache
    # Transparent proxying using the client IP from the TCP connection
    #source 192.168.33.15 usesrc clientip
    #source 0.0.0.0 usesrc clientip
    option forwardfor
    #source 192.168.33.15 usesrc hdr_ip(X-Forwarded-For)
    server s1 192.168.33.15:81 cookie s1 check maxconn 250
    #server s2 192.168.33.16:81 cookie s2 check maxconn 250
    #server s3 192.168.33.17:81 cookie s3 check maxconn 250

    #server s1 192.168.1.95:81 cookie s1 check maxconn 250
    #server s2 192.168.1.96:81 cookie s2 check maxconn 250
    #server s3 192.168.1.97:81 cookie s3 check maxconn 250

# static backend with balance based on the uri, including the query string
# to avoid caching an object on several caches
backend bk_varnish_uri
    balance uri whole # in latest HAProxy version, one can add 'whole' keyword
    # Varnish must tell it's ready to accept traffic
    #option httpchk HEAD /varnishcheck
    #http-check expect status 200
    # client IP information
    option forwardfor
    # avoid request redistribution when the number of caches changes (crash or start up)
    hash-type consistent
    server varnish1 192.168.33.15:81 check maxconn 1000
    #server varnish1 192.168.33.15:83 check maxconn 1000

# cache backend with balance based on the value of the URL parameter called "id"
# to avoid caching an object on several caches
backend bk_varnish_url_param
    balance url_param id
    # client IP information
    option forwardfor
    # avoid request redistribution when the number of caches changes (crash or start up)
    hash-type consistent
    server varnish1 192.168.33.15:81 maxconn 1000 track bk_varnish_uri/varnish1
    #server varnish1 192.168.33.15:83 maxconn 1000 track bk_varnish_uri/varnish1

# frontend used by Varnish servers when updating their cache
frontend ft_web_static
    bind 192.168.33.15:80 # private ip
    #bind 192.168.1.95:86 # temporal public ip
    monitor-uri /haproxycheck
    acl no_webheads_available nbsrv(bk_appsrv_static) eq 0
    # Tells Varnish to stop asking for static content when app servers (webheads) are dead
    # Varnish would deliver staled content
    monitor fail if no_webheads_available
    default_backend bk_appsrv_static

# appsrv backend used by Varnish to update their cache
backend bk_appsrv_static
    balance roundrobin
    # anything different than a status code 200 on the URL /staticcheck.txt
    # must be considered as an error
    #option httpchk
    #option httpchk HEAD /staticcheck.txt
    #http-check expect status 200
    # Transparent proxying using the client IP provided by X-Forwarded-For header
    option forwardfor
    #source 192.168.33.15 usesrc hdr_ip(X-Forwarded-For)
    server s1 192.168.33.15:81 check maxconn 50 slowstart 10s
    #server s2 192.168.33.16:81 check maxconn 50 slowstart 10s
    #server s3 192.168.33.17:81 check maxconn 50 slowstart 10s

    #server s1 192.168.1.95:81 check maxconn 50 slowstart 10s
    #server s2 192.168.1.96:81 check maxconn 50 slowstart 10s
    #server s3 192.168.1.97:81 check maxconn 50 slowstart 10s

#{%- if 'frontends' in salt['pillar.get']('haproxy', {}) %}
##------------------
## frontend instances
##------------------
#  {%- for frontend in salt['pillar.get']('haproxy:frontends', {}).iteritems() %}
#frontend {{ frontend[1].get('name', frontend[0]) }}
#    {%- if 'bind' in frontend[1] %}
#    {{- render_list_of_dictionaries('bind', frontend[1].bind) }}
#    {%- endif %}
#    {%- if 'log' in frontend[1] %}
#    log {{ frontend[1].log }}
#    {%- endif %}
#    {%- if 'mode' in frontend[1] %}
#    mode {{ frontend[1].mode }}
#    {%- endif %}
#    {%- if 'maxconn' in frontend[1] %}
#    maxconn {{ frontend[1].maxconn }}
#    {%- endif %}
#    {%- if 'options' in frontend[1] %}
#    {{- render_list_of_dictionaries('option', frontend[1].options) }}
#    {%- endif %}
#    {%- if 'captures' in frontend[1] %}
#    {{- render_list_of_dictionaries('capture', frontend[1].captures) }}
#    {%- endif %}
#    {%- if 'acls' in frontend[1] %}
#    {{- render_list_of_dictionaries('acl', frontend[1].acls) }}
#    {%- endif %}
#    {%- if 'tcprequests' in frontend[1] %}
#    {{- render_list_of_dictionaries('tcp-request', frontend[1].tcprequests) }}
#    {%- endif %}
#    {%- if 'tcpresponses' in frontend[1] %}
#    {{- render_list_of_dictionaries('tcp-response', frontend[1].tcpresponses) }}
#    {%- endif %}
#    {%- if 'httprequests' in frontend[1] %}
#    {{- render_list_of_dictionaries('http-request', frontend[1].httprequests) }}
#    {%- endif %}
#    {%- if 'httpresponses' in frontend[1] %}
#    {{- render_list_of_dictionaries('http-response', frontend[1].httpresponses) }}
#    {%- endif %}
#    {%- if 'rspadds' in frontend[1] %}
#    {{- render_list_of_dictionaries('rspadd', frontend[1].rspadds) }}
#    {%- endif %}
#    {%- if 'reqadds' in frontend[1] %}
#    {{- render_list_of_dictionaries('reqadd', frontend[1].reqadds) }}
#    {%- endif %}
#    {%- if 'redirects' in frontend[1] %}
#    {{- render_list_of_dictionaries('redirect', frontend[1].redirects) }}
#    {%- endif %}
#    {%- if 'stickons' in frontend[1] %}
#    {{- render_list_of_dictionaries('stickon', frontend[1].stickons) }}
#    {%- endif %}
#    {%- if 'default_backend' in frontend[1] %}
#    default_backend {{ frontend[1].default_backend }}
#    {%- endif %}
#    {%- if 'use_backends' in frontend[1] %}
#    {{- render_list_of_dictionaries('use_backend', frontend[1].use_backends) }}
#    {%- endif %}
#  {% endfor %}
#{%- endif %}
#
#{%- if 'backends' in salt['pillar.get']('haproxy', {}) %}
##------------------
## backend instances
##------------------
#  {%- for backend in salt['pillar.get']('haproxy:backends', {}).iteritems() %}
#backend {{ backend[1].get('name',backend[0]) }}
#    {%- if 'mode' in backend[1] %}
#    mode {{ backend[1].mode }}
#    {%- endif %}
#    {%- if 'balance' in backend[1] %}
#    balance {{ backend[1].balance }}
#    {%- endif %}
#    {%- if 'options' in backend[1] %}
#      {%- if backend[1].options is string %}
#    option {{ backend[1].options }}
#      {%- else %}
#        {%- for option in backend[1].options %}
#    option {{ option }}
#        {%- endfor %}
#      {%- endif %}
#    {%- endif %}
#    {%- if 'cookie' in backend[1] %}
#    cookie {{ backend[1].cookie }}
#    {%- endif %}
#    {%- if 'stats' in backend[1] %}
#      {%- for option, value in backend[1].stats.iteritems() %}
#        {%- if option == 'enable' and value %}
#    stats enable
#        {%- else %}
#    stats {{ option }} {{ value }}
#        {%- endif %}
#      {%- endfor %}
#    {%- endif %}
#    {%- if 'defaultserver' in backend[1] %}
#    default-server {%- for option, value in backend[1].defaultserver.iteritems() %} {{ ' '.join((option, value|string, '')) }} {%- endfor %}
#    {%- endif %}
#    {%- if 'servers' in backend[1] %}
#      {%- for server in backend[1].servers.iteritems() %}
#    server {{ server[1].get('name',server[0]) }} {{ server[1].host }}:{{ server[1].port }} {{ server[1].check }} {{ server[1].get('extra', '') }}
#      {%- endfor %}
#    {%- endif %}
#  {% endfor %}
#{%- endif %}
