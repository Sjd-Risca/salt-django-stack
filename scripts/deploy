#!/usr/bin/env python

import argparse
import pprint

import salt.config
import salt.client
import salt.runner

local = salt.client.LocalClient()
opts = salt.config.master_config('/etc/salt/master')
runner = salt.runner.RunnerClient(opts)

pp = pprint.PrettyPrinter(indent=4)

parser = argparse.ArgumentParser(
    description='''Deploy Django project and/or applications. Run with sudo for Salt's features to work.

Examples:

    sudo deploy -p
    sudo deploy -a django-braces==1.8.1
    sudo deploy -a /home/user/djapps/django-zinibu-main --no-restart
    sudo deploy -a
''',
    formatter_class=argparse.RawDescriptionHelpFormatter
)
parser.add_argument("-p", "--project", help="Deploy the project", action="store_true")
parser.add_argument(
    "-a", 
    "--apps", 
    help='''Deploy applications.
Specify a list of application names separated by spaces and matching the ids defined in the zinibu.django pillar.
It will deploy all applications by default.
''',
    default=None,
    nargs="*"
)
parser.add_argument("--no-restart", dest="no_restart", help="Do not restart services after deployment", action="store_true", default=False)
parser.add_argument("--debug", help="Print debug information", action="store_true")
args = parser.parse_args()

if args.project:
    print('Deploying project...')
    runner.cmd('state.orchestrate', ['zinibu.deploy'], kwarg={'pillar': {'deploy_target': 'project'}})

if args.apps is not None:
    if len(args.apps):
        print('Deploying selected applications...')
        runner.cmd('state.orchestrate', ['zinibu.deploy'], kwarg={'pillar': {'deploy_target': 'apps', 'apps': args.apps }})
    else:
        print('Deploying all applications...')
        runner.cmd('state.orchestrate', ['zinibu.deploy'], kwarg={'pillar': {'deploy_target': 'apps'}})

if not args.no_restart:
    print('Restarting zinibu service...')
    result = local.cmd('roles:webhead', 'service.restart', ['zinibu'],  expr_form='grain')
    if args.debug:
        pp.pprint(result)

if not args.no_restart:
    print('Restarting Varnish...')
    result = local.cmd('roles:varnish', 'service.restart', ['varnish'], expr_form='grain')
    if args.debug:
        pp.pprint(result)
