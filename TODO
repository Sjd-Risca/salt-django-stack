TODO

- setup nginx and varnish manually and then use salt and pillar
- haproxy.cfg from pillar data ready, now modify nginx and varnish to work with haproxy and finally, enable installation of other haproxy and test keepalived manually (not salt at first)
- install haproxy to have a setup like this: haproxy with ssl termination > varnish > nginx > gunicorn , use haproxy with balance uri to maximize cache hits, so, multiple varnish servers but let's start with one haproxy sending to one varnish that does the load balacing

- nfs for static files
- modifying settings.py in django to connect to db and dbsync/migrate as needed, see django formula for ideas
- install redis and change settings to use it
- define .probe for varnish/default.vcl with django, maybe just some image or better a functioning url delivered by django? I think I have somethging prodcing /aerticle/probe

- logrotate to keep all logs under control (syslog for something else?)
- move postgres-related lines from zinibu.python.init to postgres specific states, add include to zinibu.python.init.
- I may need to change /srv/salt/top.sls to point a minion, like 'db' to zinibu.postgresql, and the rest to zinibu (which, as mentioned above, is zinibu.init.sls) to work as webheads. As an example from http://docs.saltstack.com/en/latest/topics/best_practices.html:

base:
  'web*':
    - mysql.client
    - mysql.python
  'db*':
    - mysql.server


- I want to run the whole thing with:
sudo salt '*' state.highstate

- get things working up to here with salt and then move to Varnish

- zinibu.python is doing django stuff and that should probably go to zinibu.django

- Check how to run pip upgrades like:
pip install Django --upgrade

- States for deployment, probably named zinibu.deploy, and find best way to indicate if it's development, staging, production (pass via pillar in command line, see README and python states). I think I just need to consider one box as one environment so minions' ids are enough to target the states. This means no more having dev, staging and production all on the same box.

- check connections
netstat -ctnup | grep "192.168.1.95"

